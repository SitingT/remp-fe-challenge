{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { useCustomFetch } from \"./useCustomFetch\";\nexport function usePaginatedTransactions() {\n  _s();\n\n  const {\n    fetchWithCache,\n    loading\n  } = useCustomFetch();\n  const [paginatedTransactions, setPaginatedTransactions] = useState(null);\n  const [employeeId, setEmployeeId] = useState(null);\n  const fetchAll = useCallback(async function () {\n    let selectedEmployeeId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : employeeId;\n    const response = await fetchWithCache(\"paginatedTransactions\", {\n      page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n      employeeId: selectedEmployeeId // Add this line to filter by employee\n\n    });\n    setPaginatedTransactions(previousResponse => {\n      if (response === null || previousResponse === null || selectedEmployeeId !== employeeId) {\n        return response;\n      }\n\n      return {\n        data: [...previousResponse.data, ...response.data],\n        nextPage: response.nextPage\n      };\n    });\n  }, [fetchWithCache, paginatedTransactions, employeeId]); // ...\n\n  return {\n    data: paginatedTransactions,\n    loading,\n    fetchAll,\n    invalidateData,\n    setEmployeeId\n  };\n} // export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n//   const fetchAll = useCallback(async () => {\n//     const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n//       \"paginatedTransactions\",\n//       {\n//         page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n//       }\n//     )\n//     setPaginatedTransactions((previousResponse) => {\n//       if (response === null || previousResponse === null) {\n//         return response\n//       }\n//       return { data: response.data, nextPage: response.nextPage }\n//     })\n//   }, [fetchWithCache, paginatedTransactions])\n//   const invalidateData = useCallback(() => {\n//     setPaginatedTransactions(null)\n//   }, [])\n//   return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n// }\n\n_s(usePaginatedTransactions, \"yMmEIFWpyLMv8ES6hIcjmoxrkis=\", false, function () {\n  return [useCustomFetch];\n});","map":{"version":3,"names":["useCallback","useState","useCustomFetch","usePaginatedTransactions","fetchWithCache","loading","paginatedTransactions","setPaginatedTransactions","employeeId","setEmployeeId","fetchAll","selectedEmployeeId","response","page","nextPage","previousResponse","data","invalidateData"],"sources":["/Users/sitingtang/Desktop/ramp-fe-challenge/src/hooks/usePaginatedTransactions.ts"],"sourcesContent":["import { useCallback, useState } from \"react\"\nimport { PaginatedRequestParams, PaginatedResponse, Transaction } from \"../utils/types\"\nimport { PaginatedTransactionsResult } from \"./types\"\nimport { useCustomFetch } from \"./useCustomFetch\"\n\nexport function usePaginatedTransactions(): PaginatedTransactionsResult {\n  const { fetchWithCache, loading } = useCustomFetch()\n  const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n    Transaction[]\n  > | null>(null)\n  const [employeeId, setEmployeeId] = useState<string | null>(null)\n\n  const fetchAll = useCallback(\n    async (selectedEmployeeId: string | null = employeeId) => {\n      const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n        \"paginatedTransactions\",\n        {\n          page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n          employeeId: selectedEmployeeId, // Add this line to filter by employee\n        }\n      )\n\n      setPaginatedTransactions((previousResponse) => {\n        if (response === null || previousResponse === null || selectedEmployeeId !== employeeId) {\n          return response\n        }\n\n        return { data: [...previousResponse.data, ...response.data], nextPage: response.nextPage }\n      })\n    },\n    [fetchWithCache, paginatedTransactions, employeeId]\n  )\n\n  // ...\n\n  return { data: paginatedTransactions, loading, fetchAll, invalidateData, setEmployeeId }\n}\n\n// export function usePaginatedTransactions(): PaginatedTransactionsResult {\n//   const { fetchWithCache, loading } = useCustomFetch()\n//   const [paginatedTransactions, setPaginatedTransactions] = useState<PaginatedResponse<\n//     Transaction[]\n//   > | null>(null)\n\n//   const fetchAll = useCallback(async () => {\n//     const response = await fetchWithCache<PaginatedResponse<Transaction[]>, PaginatedRequestParams>(\n//       \"paginatedTransactions\",\n//       {\n//         page: paginatedTransactions === null ? 0 : paginatedTransactions.nextPage,\n//       }\n//     )\n\n//     setPaginatedTransactions((previousResponse) => {\n//       if (response === null || previousResponse === null) {\n//         return response\n//       }\n\n//       return { data: response.data, nextPage: response.nextPage }\n//     })\n//   }, [fetchWithCache, paginatedTransactions])\n\n//   const invalidateData = useCallback(() => {\n//     setPaginatedTransactions(null)\n//   }, [])\n\n//   return { data: paginatedTransactions, loading, fetchAll, invalidateData }\n// }\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAGA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,OAAO,SAASC,wBAAT,GAAiE;EAAA;;EACtE,MAAM;IAAEC,cAAF;IAAkBC;EAAlB,IAA8BH,cAAc,EAAlD;EACA,MAAM,CAACI,qBAAD,EAAwBC,wBAAxB,IAAoDN,QAAQ,CAExD,IAFwD,CAAlE;EAGA,MAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAgB,IAAhB,CAA5C;EAEA,MAAMS,QAAQ,GAAGV,WAAW,CAC1B,kBAA0D;IAAA,IAAnDW,kBAAmD,uEAAfH,UAAe;IACxD,MAAMI,QAAQ,GAAG,MAAMR,cAAc,CACnC,uBADmC,EAEnC;MACES,IAAI,EAAEP,qBAAqB,KAAK,IAA1B,GAAiC,CAAjC,GAAqCA,qBAAqB,CAACQ,QADnE;MAEEN,UAAU,EAAEG,kBAFd,CAEkC;;IAFlC,CAFmC,CAArC;IAQAJ,wBAAwB,CAAEQ,gBAAD,IAAsB;MAC7C,IAAIH,QAAQ,KAAK,IAAb,IAAqBG,gBAAgB,KAAK,IAA1C,IAAkDJ,kBAAkB,KAAKH,UAA7E,EAAyF;QACvF,OAAOI,QAAP;MACD;;MAED,OAAO;QAAEI,IAAI,EAAE,CAAC,GAAGD,gBAAgB,CAACC,IAArB,EAA2B,GAAGJ,QAAQ,CAACI,IAAvC,CAAR;QAAsDF,QAAQ,EAAEF,QAAQ,CAACE;MAAzE,CAAP;IACD,CANuB,CAAxB;EAOD,CAjByB,EAkB1B,CAACV,cAAD,EAAiBE,qBAAjB,EAAwCE,UAAxC,CAlB0B,CAA5B,CAPsE,CA4BtE;;EAEA,OAAO;IAAEQ,IAAI,EAAEV,qBAAR;IAA+BD,OAA/B;IAAwCK,QAAxC;IAAkDO,cAAlD;IAAkER;EAAlE,CAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;GA7DgBN,wB;UACsBD,c"},"metadata":{},"sourceType":"module"}