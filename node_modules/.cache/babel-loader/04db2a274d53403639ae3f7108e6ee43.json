{"ast":null,"code":"var _jsxFileName = \"/Users/sitingtang/Desktop/remp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { ApprovalProvider } from \"./context /approval\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    // setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll(); // setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setIsLoading(true);\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n    setIsLoading(false);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ApprovalProvider, {\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"MainContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"RampBreak--l\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n          // isLoading={employeeUtils.loading}\n          isLoading: isLoading,\n          defaultValue: EMPTY_EMPLOYEE,\n          items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n          label: \"Filter by employee\",\n          loadingLabel: \"Loading employees\",\n          parseItem: item => ({\n            value: item.id,\n            label: item.id === null ? \"All Employees\" : `${item.firstName} ${item.lastName}`\n          }),\n          onChange: async newValue => {\n            if (newValue === null || newValue.id === \"\") {\n              setSelectedEmployeeId(null);\n              await loadAllTransactions();\n            } else {\n              setSelectedEmployeeId(newValue.id);\n              await loadTransactionsByEmployee(newValue.id);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--l\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading transactions...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampGrid\",\n          children: [/*#__PURE__*/_jsxDEV(Transactions, {\n            transactions: transactions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), selectedEmployeeId === null && transactions !== null && paginatedTransactions && paginatedTransactions.nextPage !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"RampButton\",\n            disabled: paginatedTransactionsUtils.loading,\n            onClick: async () => {\n              await loadAllTransactions();\n            },\n            children: \"View More\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"67SBHhqUkP/BDYzSuRj5t5Aqiuc=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","ApprovalProvider","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","selectedEmployeeId","setSelectedEmployeeId","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/sitingtang/Desktop/remp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\nimport { ApprovalProvider } from \"./context /approval\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } =\n    usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } =\n    useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  );\n\n  const loadAllTransactions = useCallback(async () => {\n    // setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n\n    // setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setIsLoading(true);\n      paginatedTransactionsUtils.invalidateData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n      setIsLoading(false);\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(\n    null\n  );\n\n  return (\n    <Fragment>\n      <ApprovalProvider>\n        <main className=\"MainContainer\">\n          <Instructions />\n\n          <hr className=\"RampBreak--l\" />\n\n          <InputSelect<Employee>\n            // isLoading={employeeUtils.loading}\n            isLoading={isLoading}\n            defaultValue={EMPTY_EMPLOYEE}\n            items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n            label=\"Filter by employee\"\n            loadingLabel=\"Loading employees\"\n            parseItem={(item) => ({\n              value: item.id,\n              label:\n                item.id === null\n                  ? \"All Employees\"\n                  : `${item.firstName} ${item.lastName}`,\n            })}\n            onChange={async (newValue: Employee | null) => {\n              if (newValue === null || newValue.id === \"\") {\n                setSelectedEmployeeId(null);\n                await loadAllTransactions();\n              } else {\n                setSelectedEmployeeId(newValue.id);\n                await loadTransactionsByEmployee(newValue.id);\n              }\n            }}\n          />\n\n          <div className=\"RampBreak--l\" />\n\n          {isLoading ? (\n            <div>Loading transactions...</div>\n          ) : (\n            <div className=\"RampGrid\">\n              <Transactions transactions={transactions} />\n\n              {selectedEmployeeId === null &&\n                transactions !== null &&\n                paginatedTransactions &&\n                paginatedTransactions.nextPage !== null && (\n                  <button\n                    className=\"RampButton\"\n                    disabled={paginatedTransactionsUtils.loading}\n                    onClick={async () => {\n                      await loadAllTransactions();\n                    }}\n                  >\n                    View More\n                  </button>\n                )}\n            </div>\n          )}\n        </main>\n      </ApprovalProvider>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}