{"ast":null,"code":"var _jsxFileName = \"/Users/sitingtang/Desktop/remp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { ApprovalProvider } from \"./context/approval\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]); // Load all transactions, including employee data and paginated transactions\n\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]); // Load transactions by a specific employee\n\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ApprovalProvider, {\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"MainContainer\",\n        children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"RampBreak--l\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n          isLoading: employeeUtils.loading,\n          defaultValue: EMPTY_EMPLOYEE,\n          items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n          label: \"Filter by employee\",\n          loadingLabel: \"Loading employees\",\n          parseItem: item => ({\n            value: item.id,\n            label: item.id === null ? \"All Employees\" : `${item.firstName} ${item.lastName}`\n          }),\n          onChange: async newValue => {\n            var _newValue$id;\n\n            setSelectedEmployeeId((_newValue$id = newValue === null || newValue === void 0 ? void 0 : newValue.id) !== null && _newValue$id !== void 0 ? _newValue$id : null);\n            newValue ? await loadTransactionsByEmployee(newValue.id) : await loadAllTransactions();\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--l\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampGrid\",\n          children: [/*#__PURE__*/_jsxDEV(Transactions, {\n            transactions: transactions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), selectedEmployeeId === null && (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"RampButton\",\n            disabled: paginatedTransactionsUtils.loading,\n            onClick: loadAllTransactions,\n            children: \"View More\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"BCtPPxa2tTLneZcIaAm8TBX08VA=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","ApprovalProvider","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","transactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","selectedEmployeeId","setSelectedEmployeeId","item","value","id","label","firstName","lastName","newValue","nextPage"],"sources":["/Users/sitingtang/Desktop/remp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\nimport { ApprovalProvider } from \"./context/approval\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } =\n    usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } =\n    useTransactionsByEmployee();\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  );\n\n  // Load all transactions, including employee data and paginated transactions\n  const loadAllTransactions = useCallback(async () => {\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  // Load transactions by a specific employee\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  const [selectedEmployeeId, setSelectedEmployeeId] = useState<string | null>(\n    null\n  );\n\n  return (\n    <Fragment>\n      <ApprovalProvider>\n        <main className=\"MainContainer\">\n          <Instructions />\n          <hr className=\"RampBreak--l\" />\n\n          <InputSelect<Employee>\n            isLoading={employeeUtils.loading}\n            defaultValue={EMPTY_EMPLOYEE}\n            items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n            label=\"Filter by employee\"\n            loadingLabel=\"Loading employees\"\n            parseItem={(item) => ({\n              value: item.id,\n              label:\n                item.id === null\n                  ? \"All Employees\"\n                  : `${item.firstName} ${item.lastName}`,\n            })}\n            onChange={async (newValue: Employee | null) => {\n              setSelectedEmployeeId(newValue?.id ?? null);\n              newValue\n                ? await loadTransactionsByEmployee(newValue.id)\n                : await loadAllTransactions();\n            }}\n          />\n\n          <div className=\"RampBreak--l\" />\n\n          <div className=\"RampGrid\">\n            <Transactions transactions={transactions} />\n\n            {selectedEmployeeId === null &&\n              paginatedTransactions?.nextPage !== null && (\n                <button\n                  className=\"RampButton\"\n                  disabled={paginatedTransactionsUtils.loading}\n                  onClick={loadAllTransactions}\n                >\n                  View More\n                </button>\n              )}\n          </div>\n        </main>\n      </ApprovalProvider>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}